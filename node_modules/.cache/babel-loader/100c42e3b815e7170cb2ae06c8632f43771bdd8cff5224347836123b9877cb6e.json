{"ast":null,"code":"import { ShaderMaterial, Color } from \"three\";\nimport { extend } from \"@react-three/fiber\";\nclass CustomMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      vertexShader: \"uniform float scale;\\n      uniform float shift;\\n      varying vec2 vUv;\\n      void main() {\\n        vec3 pos = position;\\n        pos.x = pos.x + ((sin(uv.y * 3.1415926535897932384626433832795) * shift * 2.0) * 0.125);\\n        vUv = uv;\\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.);\\n      }\",\n      fragmentShader: \"uniform sampler2D tex;\\n      uniform float hasTexture;\\n      uniform float shift;\\n      uniform float scale;\\n      uniform vec3 color;\\n      uniform float opacity;\\n      varying vec2 vUv;\\n      void main() {\\n        float angle = 0.0;\\n        vec2 p = (vUv - vec2(0.5, 0.5)) * (1.0 - scale) + vec2(0.5, 0.5);\\n        vec2 offset = 0.0 * vec2(cos(angle), sin(angle));\\n        vec4 cr = texture2D(tex, p + offset);\\n        vec4 cga = texture2D(tex, p);\\n        vec4 cb = texture2D(tex, p - offset);\\n        if (hasTexture == 1.0) gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\\n        else gl_FragColor = vec4(color, opacity);\\n      }\",\n      uniforms: {\n        tex: {\n          value: null\n        },\n        hasTexture: {\n          value: 0\n        },\n        scale: {\n          value: 0\n        },\n        shift: {\n          value: 0\n        },\n        opacity: {\n          value: 1\n        },\n        color: {\n          value: new Color(\"white\")\n        }\n      }\n    });\n  }\n  set scale(value) {\n    this.uniforms.scale.value = value;\n  }\n  get scale() {\n    return this.uniforms.scale.value;\n  }\n  set shift(value) {\n    this.uniforms.shift.value = value;\n  }\n  get shift() {\n    return this.uniforms.shift.value;\n  }\n  set map(value) {\n    this.uniforms.hasTexture.value = !!value;\n    this.uniforms.tex.value = value;\n  }\n  get map() {\n    return this.uniforms.tex.value;\n  }\n  get color() {\n    return this.uniforms.color.value;\n  }\n  get opacity() {\n    return this.uniforms.opacity.value;\n  }\n  set opacity(value) {\n    if (this.uniforms) this.uniforms.opacity.value = value;\n  }\n}\nextend({\n  CustomMaterial\n});","map":{"version":3,"names":["ShaderMaterial","Color","extend","CustomMaterial","constructor","vertexShader","fragmentShader","uniforms","tex","value","hasTexture","scale","shift","opacity","color","map"],"sources":["D:/GUSTAVO/minimap/src/components/CustomMaterial.js"],"sourcesContent":["import { ShaderMaterial, Color } from \"three\"\nimport { extend } from \"@react-three/fiber\"\n\nclass CustomMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      vertexShader: `uniform float scale;\n      uniform float shift;\n      varying vec2 vUv;\n      void main() {\n        vec3 pos = position;\n        pos.x = pos.x + ((sin(uv.y * 3.1415926535897932384626433832795) * shift * 2.0) * 0.125);\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.);\n      }`,\n      fragmentShader: `uniform sampler2D tex;\n      uniform float hasTexture;\n      uniform float shift;\n      uniform float scale;\n      uniform vec3 color;\n      uniform float opacity;\n      varying vec2 vUv;\n      void main() {\n        float angle = 0.0;\n        vec2 p = (vUv - vec2(0.5, 0.5)) * (1.0 - scale) + vec2(0.5, 0.5);\n        vec2 offset = 0.0 * vec2(cos(angle), sin(angle));\n        vec4 cr = texture2D(tex, p + offset);\n        vec4 cga = texture2D(tex, p);\n        vec4 cb = texture2D(tex, p - offset);\n        if (hasTexture == 1.0) gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\n        else gl_FragColor = vec4(color, opacity);\n      }`,\n      uniforms: {\n        tex: { value: null },\n        hasTexture: { value: 0 },\n        scale: { value: 0 },\n        shift: { value: 0 },\n        opacity: { value: 1 },\n        color: { value: new Color(\"white\") }\n      }\n    })\n  }\n\n  set scale(value) {\n    this.uniforms.scale.value = value\n  }\n\n  get scale() {\n    return this.uniforms.scale.value\n  }\n\n  set shift(value) {\n    this.uniforms.shift.value = value\n  }\n\n  get shift() {\n    return this.uniforms.shift.value\n  }\n\n  set map(value) {\n    this.uniforms.hasTexture.value = !!value\n    this.uniforms.tex.value = value\n  }\n\n  get map() {\n    return this.uniforms.tex.value\n  }\n\n  get color() {\n    return this.uniforms.color.value\n  }\n\n  get opacity() {\n    return this.uniforms.opacity.value\n  }\n\n  set opacity(value) {\n    if (this.uniforms) this.uniforms.opacity.value = value\n  }\n}\n\nextend({ CustomMaterial })\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,KAAK,QAAQ,OAAO;AAC7C,SAASC,MAAM,QAAQ,oBAAoB;AAE3C,MAAMC,cAAc,SAASH,cAAc,CAAC;EAC1CI,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC;MACJC,YAAY,wUAQV;MACFC,cAAc,4oBAgBZ;MACFC,QAAQ,EAAE;QACRC,GAAG,EAAE;UAAEC,KAAK,EAAE;QAAK,CAAC;QACpBC,UAAU,EAAE;UAAED,KAAK,EAAE;QAAE,CAAC;QACxBE,KAAK,EAAE;UAAEF,KAAK,EAAE;QAAE,CAAC;QACnBG,KAAK,EAAE;UAAEH,KAAK,EAAE;QAAE,CAAC;QACnBI,OAAO,EAAE;UAAEJ,KAAK,EAAE;QAAE,CAAC;QACrBK,KAAK,EAAE;UAAEL,KAAK,EAAE,IAAIR,KAAK,CAAC,OAAO;QAAE;MACrC;IACF,CAAC,CAAC;EACJ;EAEA,IAAIU,KAAKA,CAACF,KAAK,EAAE;IACf,IAAI,CAACF,QAAQ,CAACI,KAAK,CAACF,KAAK,GAAGA,KAAK;EACnC;EAEA,IAAIE,KAAKA,CAAA,EAAG;IACV,OAAO,IAAI,CAACJ,QAAQ,CAACI,KAAK,CAACF,KAAK;EAClC;EAEA,IAAIG,KAAKA,CAACH,KAAK,EAAE;IACf,IAAI,CAACF,QAAQ,CAACK,KAAK,CAACH,KAAK,GAAGA,KAAK;EACnC;EAEA,IAAIG,KAAKA,CAAA,EAAG;IACV,OAAO,IAAI,CAACL,QAAQ,CAACK,KAAK,CAACH,KAAK;EAClC;EAEA,IAAIM,GAAGA,CAACN,KAAK,EAAE;IACb,IAAI,CAACF,QAAQ,CAACG,UAAU,CAACD,KAAK,GAAG,CAAC,CAACA,KAAK;IACxC,IAAI,CAACF,QAAQ,CAACC,GAAG,CAACC,KAAK,GAAGA,KAAK;EACjC;EAEA,IAAIM,GAAGA,CAAA,EAAG;IACR,OAAO,IAAI,CAACR,QAAQ,CAACC,GAAG,CAACC,KAAK;EAChC;EAEA,IAAIK,KAAKA,CAAA,EAAG;IACV,OAAO,IAAI,CAACP,QAAQ,CAACO,KAAK,CAACL,KAAK;EAClC;EAEA,IAAII,OAAOA,CAAA,EAAG;IACZ,OAAO,IAAI,CAACN,QAAQ,CAACM,OAAO,CAACJ,KAAK;EACpC;EAEA,IAAII,OAAOA,CAACJ,KAAK,EAAE;IACjB,IAAI,IAAI,CAACF,QAAQ,EAAE,IAAI,CAACA,QAAQ,CAACM,OAAO,CAACJ,KAAK,GAAGA,KAAK;EACxD;AACF;AAEAP,MAAM,CAAC;EAAEC;AAAe,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}