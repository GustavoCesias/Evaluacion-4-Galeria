{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Plane, Vector3, Matrix4, Vector4, PerspectiveCamera, LinearFilter, RGBFormat, WebGLRenderTarget, DepthTexture, DepthFormat, UnsignedShortType } from 'three';\nimport { extend, useThree, useFrame } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\nimport { BlurPass } from '../materials/BlurPass.js';\nimport { MeshReflectorMaterial as MeshReflectorMaterial$1 } from '../materials/MeshReflectorMaterial.js';\nextend({\n  MeshReflectorMaterialImpl: MeshReflectorMaterial$1\n});\nconst MeshReflectorMaterial = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    mixBlur = 0,\n    mixStrength = 1,\n    resolution = 256,\n    blur = [0, 0],\n    minDepthThreshold = 0.9,\n    maxDepthThreshold = 1,\n    depthScale = 0,\n    depthToBlurRatioBias = 0.25,\n    mirror = 0,\n    debug = 0,\n    distortion = 1,\n    mixContrast = 1,\n    distortionMap,\n    ...props\n  } = _ref;\n  const gl = useThree(_ref2 => {\n    let {\n      gl\n    } = _ref2;\n    return gl;\n  });\n  const camera = useThree(_ref3 => {\n    let {\n      camera\n    } = _ref3;\n    return camera;\n  });\n  const scene = useThree(_ref4 => {\n    let {\n      scene\n    } = _ref4;\n    return scene;\n  });\n  blur = Array.isArray(blur) ? blur : [blur, blur];\n  const hasBlur = blur[0] + blur[1] > 0;\n  const materialRef = React.useRef(null);\n  const [reflectorPlane] = React.useState(() => new Plane());\n  const [normal] = React.useState(() => new Vector3());\n  const [reflectorWorldPosition] = React.useState(() => new Vector3());\n  const [cameraWorldPosition] = React.useState(() => new Vector3());\n  const [rotationMatrix] = React.useState(() => new Matrix4());\n  const [lookAtPosition] = React.useState(() => new Vector3(0, 0, -1));\n  const [clipPlane] = React.useState(() => new Vector4());\n  const [view] = React.useState(() => new Vector3());\n  const [target] = React.useState(() => new Vector3());\n  const [q] = React.useState(() => new Vector4());\n  const [textureMatrix] = React.useState(() => new Matrix4());\n  const [virtualCamera] = React.useState(() => new PerspectiveCamera());\n  const beforeRender = React.useCallback(() => {\n    var _materialRef$current;\n\n    // TODO: As of R3f 7-8 this should be __r3f.parent\n    const parent = materialRef.current.parent || ((_materialRef$current = materialRef.current) == null ? void 0 : _materialRef$current.__r3f.parent);\n    if (!parent) return;\n    reflectorWorldPosition.setFromMatrixPosition(parent.matrixWorld);\n    cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n    rotationMatrix.extractRotation(parent.matrixWorld);\n    normal.set(0, 0, 1);\n    normal.applyMatrix4(rotationMatrix);\n    view.subVectors(reflectorWorldPosition, cameraWorldPosition); // Avoid rendering when reflector is facing away\n\n    if (view.dot(normal) > 0) return;\n    view.reflect(normal).negate();\n    view.add(reflectorWorldPosition);\n    rotationMatrix.extractRotation(camera.matrixWorld);\n    lookAtPosition.set(0, 0, -1);\n    lookAtPosition.applyMatrix4(rotationMatrix);\n    lookAtPosition.add(cameraWorldPosition);\n    target.subVectors(reflectorWorldPosition, lookAtPosition);\n    target.reflect(normal).negate();\n    target.add(reflectorWorldPosition);\n    virtualCamera.position.copy(view);\n    virtualCamera.up.set(0, 1, 0);\n    virtualCamera.up.applyMatrix4(rotationMatrix);\n    virtualCamera.up.reflect(normal);\n    virtualCamera.lookAt(target);\n    virtualCamera.far = camera.far; // Used in WebGLBackground\n\n    virtualCamera.updateMatrixWorld();\n    virtualCamera.projectionMatrix.copy(camera.projectionMatrix); // Update the texture matrix\n\n    textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n    textureMatrix.multiply(virtualCamera.projectionMatrix);\n    textureMatrix.multiply(virtualCamera.matrixWorldInverse);\n    textureMatrix.multiply(parent.matrixWorld); // Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n    // Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n\n    reflectorPlane.setFromNormalAndCoplanarPoint(normal, reflectorWorldPosition);\n    reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\n    clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);\n    const projectionMatrix = virtualCamera.projectionMatrix;\n    q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n    q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n    q.z = -1.0;\n    q.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14]; // Calculate the scaled plane vector\n\n    clipPlane.multiplyScalar(2.0 / clipPlane.dot(q)); // Replacing the third row of the projection matrix\n\n    projectionMatrix.elements[2] = clipPlane.x;\n    projectionMatrix.elements[6] = clipPlane.y;\n    projectionMatrix.elements[10] = clipPlane.z + 1.0;\n    projectionMatrix.elements[14] = clipPlane.w;\n  }, []);\n  const [fbo1, fbo2, blurpass, reflectorProps] = React.useMemo(() => {\n    const parameters = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBFormat,\n      encoding: gl.outputEncoding\n    };\n    const fbo1 = new WebGLRenderTarget(resolution, resolution, parameters);\n    fbo1.depthBuffer = true;\n    fbo1.depthTexture = new DepthTexture(resolution, resolution);\n    fbo1.depthTexture.format = DepthFormat;\n    fbo1.depthTexture.type = UnsignedShortType;\n    const fbo2 = new WebGLRenderTarget(resolution, resolution, parameters);\n    const blurpass = new BlurPass({\n      gl,\n      resolution,\n      width: blur[0],\n      height: blur[1],\n      minDepthThreshold,\n      maxDepthThreshold,\n      depthScale,\n      depthToBlurRatioBias\n    });\n    const reflectorProps = {\n      mirror,\n      textureMatrix,\n      mixBlur,\n      tDiffuse: fbo1.texture,\n      tDepth: fbo1.depthTexture,\n      tDiffuseBlur: fbo2.texture,\n      hasBlur,\n      mixStrength,\n      minDepthThreshold,\n      maxDepthThreshold,\n      depthScale,\n      depthToBlurRatioBias,\n      transparent: true,\n      debug,\n      distortion,\n      distortionMap,\n      mixContrast,\n      'defines-USE_BLUR': hasBlur ? '' : undefined,\n      'defines-USE_DEPTH': depthScale > 0 ? '' : undefined,\n      'defines-USE_DISTORTION': distortionMap ? '' : undefined\n    };\n    return [fbo1, fbo2, blurpass, reflectorProps];\n  }, [gl, blur, textureMatrix, resolution, mirror, hasBlur, mixBlur, mixStrength, minDepthThreshold, maxDepthThreshold, depthScale, depthToBlurRatioBias, debug, distortion, distortionMap, mixContrast]);\n  useFrame(() => {\n    var _materialRef$current2;\n\n    // TODO: As of R3f 7-8 this should be __r3f.parent\n    const parent = materialRef.current.parent || ((_materialRef$current2 = materialRef.current) == null ? void 0 : _materialRef$current2.__r3f.parent);\n    if (!parent) return;\n    parent.visible = false;\n    const currentXrEnabled = gl.xr.enabled;\n    const currentShadowAutoUpdate = gl.shadowMap.autoUpdate;\n    beforeRender();\n    gl.xr.enabled = false;\n    gl.shadowMap.autoUpdate = false;\n    gl.setRenderTarget(fbo1);\n    gl.state.buffers.depth.setMask(true);\n    if (!gl.autoClear) gl.clear();\n    gl.render(scene, virtualCamera);\n    if (hasBlur) blurpass.render(gl, fbo1, fbo2);\n    gl.xr.enabled = currentXrEnabled;\n    gl.shadowMap.autoUpdate = currentShadowAutoUpdate;\n    parent.visible = true;\n    gl.setRenderTarget(null);\n  });\n  return /*#__PURE__*/React.createElement(\"meshReflectorMaterialImpl\", _extends({\n    attach: \"material\" // Defines can't be updated dynamically, so we need to recreate the material\n    ,\n\n    key: 'key' + reflectorProps['defines-USE_BLUR'] + reflectorProps['defines-USE_DEPTH'] + reflectorProps['defines-USE_DISTORTION'],\n    ref: mergeRefs([materialRef, ref])\n  }, reflectorProps, props));\n});\nexport { MeshReflectorMaterial };","map":{"version":3,"names":["_extends","React","Plane","Vector3","Matrix4","Vector4","PerspectiveCamera","LinearFilter","RGBFormat","WebGLRenderTarget","DepthTexture","DepthFormat","UnsignedShortType","extend","useThree","useFrame","mergeRefs","BlurPass","MeshReflectorMaterial","MeshReflectorMaterial$1","MeshReflectorMaterialImpl","forwardRef","_ref","ref","mixBlur","mixStrength","resolution","blur","minDepthThreshold","maxDepthThreshold","depthScale","depthToBlurRatioBias","mirror","debug","distortion","mixContrast","distortionMap","props","gl","_ref2","camera","_ref3","scene","_ref4","Array","isArray","hasBlur","materialRef","useRef","reflectorPlane","useState","normal","reflectorWorldPosition","cameraWorldPosition","rotationMatrix","lookAtPosition","clipPlane","view","target","q","textureMatrix","virtualCamera","beforeRender","useCallback","_materialRef$current","parent","current","__r3f","setFromMatrixPosition","matrixWorld","extractRotation","set","applyMatrix4","subVectors","dot","reflect","negate","add","position","copy","up","lookAt","far","updateMatrixWorld","projectionMatrix","multiply","matrixWorldInverse","setFromNormalAndCoplanarPoint","x","y","z","constant","Math","sign","elements","w","multiplyScalar","fbo1","fbo2","blurpass","reflectorProps","useMemo","parameters","minFilter","magFilter","format","encoding","outputEncoding","depthBuffer","depthTexture","type","width","height","tDiffuse","texture","tDepth","tDiffuseBlur","transparent","undefined","_materialRef$current2","visible","currentXrEnabled","xr","enabled","currentShadowAutoUpdate","shadowMap","autoUpdate","setRenderTarget","state","buffers","depth","setMask","autoClear","clear","render","createElement","attach","key"],"sources":["D:/GUSTAVO/minimap/node_modules/@react-three/drei/core/MeshReflectorMaterial.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Plane, Vector3, Matrix4, Vector4, PerspectiveCamera, LinearFilter, RGBFormat, WebGLRenderTarget, DepthTexture, DepthFormat, UnsignedShortType } from 'three';\nimport { extend, useThree, useFrame } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\nimport { BlurPass } from '../materials/BlurPass.js';\nimport { MeshReflectorMaterial as MeshReflectorMaterial$1 } from '../materials/MeshReflectorMaterial.js';\n\nextend({\n  MeshReflectorMaterialImpl: MeshReflectorMaterial$1\n});\nconst MeshReflectorMaterial = /*#__PURE__*/React.forwardRef(({\n  mixBlur = 0,\n  mixStrength = 1,\n  resolution = 256,\n  blur = [0, 0],\n  minDepthThreshold = 0.9,\n  maxDepthThreshold = 1,\n  depthScale = 0,\n  depthToBlurRatioBias = 0.25,\n  mirror = 0,\n  debug = 0,\n  distortion = 1,\n  mixContrast = 1,\n  distortionMap,\n  ...props\n}, ref) => {\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const camera = useThree(({\n    camera\n  }) => camera);\n  const scene = useThree(({\n    scene\n  }) => scene);\n  blur = Array.isArray(blur) ? blur : [blur, blur];\n  const hasBlur = blur[0] + blur[1] > 0;\n  const materialRef = React.useRef(null);\n  const [reflectorPlane] = React.useState(() => new Plane());\n  const [normal] = React.useState(() => new Vector3());\n  const [reflectorWorldPosition] = React.useState(() => new Vector3());\n  const [cameraWorldPosition] = React.useState(() => new Vector3());\n  const [rotationMatrix] = React.useState(() => new Matrix4());\n  const [lookAtPosition] = React.useState(() => new Vector3(0, 0, -1));\n  const [clipPlane] = React.useState(() => new Vector4());\n  const [view] = React.useState(() => new Vector3());\n  const [target] = React.useState(() => new Vector3());\n  const [q] = React.useState(() => new Vector4());\n  const [textureMatrix] = React.useState(() => new Matrix4());\n  const [virtualCamera] = React.useState(() => new PerspectiveCamera());\n  const beforeRender = React.useCallback(() => {\n    var _materialRef$current;\n\n    // TODO: As of R3f 7-8 this should be __r3f.parent\n    const parent = materialRef.current.parent || ((_materialRef$current = materialRef.current) == null ? void 0 : _materialRef$current.__r3f.parent);\n    if (!parent) return;\n    reflectorWorldPosition.setFromMatrixPosition(parent.matrixWorld);\n    cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);\n    rotationMatrix.extractRotation(parent.matrixWorld);\n    normal.set(0, 0, 1);\n    normal.applyMatrix4(rotationMatrix);\n    view.subVectors(reflectorWorldPosition, cameraWorldPosition); // Avoid rendering when reflector is facing away\n\n    if (view.dot(normal) > 0) return;\n    view.reflect(normal).negate();\n    view.add(reflectorWorldPosition);\n    rotationMatrix.extractRotation(camera.matrixWorld);\n    lookAtPosition.set(0, 0, -1);\n    lookAtPosition.applyMatrix4(rotationMatrix);\n    lookAtPosition.add(cameraWorldPosition);\n    target.subVectors(reflectorWorldPosition, lookAtPosition);\n    target.reflect(normal).negate();\n    target.add(reflectorWorldPosition);\n    virtualCamera.position.copy(view);\n    virtualCamera.up.set(0, 1, 0);\n    virtualCamera.up.applyMatrix4(rotationMatrix);\n    virtualCamera.up.reflect(normal);\n    virtualCamera.lookAt(target);\n    virtualCamera.far = camera.far; // Used in WebGLBackground\n\n    virtualCamera.updateMatrixWorld();\n    virtualCamera.projectionMatrix.copy(camera.projectionMatrix); // Update the texture matrix\n\n    textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n    textureMatrix.multiply(virtualCamera.projectionMatrix);\n    textureMatrix.multiply(virtualCamera.matrixWorldInverse);\n    textureMatrix.multiply(parent.matrixWorld); // Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n    // Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n\n    reflectorPlane.setFromNormalAndCoplanarPoint(normal, reflectorWorldPosition);\n    reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);\n    clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);\n    const projectionMatrix = virtualCamera.projectionMatrix;\n    q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];\n    q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];\n    q.z = -1.0;\n    q.w = (1.0 + projectionMatrix.elements[10]) / projectionMatrix.elements[14]; // Calculate the scaled plane vector\n\n    clipPlane.multiplyScalar(2.0 / clipPlane.dot(q)); // Replacing the third row of the projection matrix\n\n    projectionMatrix.elements[2] = clipPlane.x;\n    projectionMatrix.elements[6] = clipPlane.y;\n    projectionMatrix.elements[10] = clipPlane.z + 1.0;\n    projectionMatrix.elements[14] = clipPlane.w;\n  }, []);\n  const [fbo1, fbo2, blurpass, reflectorProps] = React.useMemo(() => {\n    const parameters = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBFormat,\n      encoding: gl.outputEncoding\n    };\n    const fbo1 = new WebGLRenderTarget(resolution, resolution, parameters);\n    fbo1.depthBuffer = true;\n    fbo1.depthTexture = new DepthTexture(resolution, resolution);\n    fbo1.depthTexture.format = DepthFormat;\n    fbo1.depthTexture.type = UnsignedShortType;\n    const fbo2 = new WebGLRenderTarget(resolution, resolution, parameters);\n    const blurpass = new BlurPass({\n      gl,\n      resolution,\n      width: blur[0],\n      height: blur[1],\n      minDepthThreshold,\n      maxDepthThreshold,\n      depthScale,\n      depthToBlurRatioBias\n    });\n    const reflectorProps = {\n      mirror,\n      textureMatrix,\n      mixBlur,\n      tDiffuse: fbo1.texture,\n      tDepth: fbo1.depthTexture,\n      tDiffuseBlur: fbo2.texture,\n      hasBlur,\n      mixStrength,\n      minDepthThreshold,\n      maxDepthThreshold,\n      depthScale,\n      depthToBlurRatioBias,\n      transparent: true,\n      debug,\n      distortion,\n      distortionMap,\n      mixContrast,\n      'defines-USE_BLUR': hasBlur ? '' : undefined,\n      'defines-USE_DEPTH': depthScale > 0 ? '' : undefined,\n      'defines-USE_DISTORTION': distortionMap ? '' : undefined\n    };\n    return [fbo1, fbo2, blurpass, reflectorProps];\n  }, [gl, blur, textureMatrix, resolution, mirror, hasBlur, mixBlur, mixStrength, minDepthThreshold, maxDepthThreshold, depthScale, depthToBlurRatioBias, debug, distortion, distortionMap, mixContrast]);\n  useFrame(() => {\n    var _materialRef$current2;\n\n    // TODO: As of R3f 7-8 this should be __r3f.parent\n    const parent = materialRef.current.parent || ((_materialRef$current2 = materialRef.current) == null ? void 0 : _materialRef$current2.__r3f.parent);\n    if (!parent) return;\n    parent.visible = false;\n    const currentXrEnabled = gl.xr.enabled;\n    const currentShadowAutoUpdate = gl.shadowMap.autoUpdate;\n    beforeRender();\n    gl.xr.enabled = false;\n    gl.shadowMap.autoUpdate = false;\n    gl.setRenderTarget(fbo1);\n    gl.state.buffers.depth.setMask(true);\n    if (!gl.autoClear) gl.clear();\n    gl.render(scene, virtualCamera);\n    if (hasBlur) blurpass.render(gl, fbo1, fbo2);\n    gl.xr.enabled = currentXrEnabled;\n    gl.shadowMap.autoUpdate = currentShadowAutoUpdate;\n    parent.visible = true;\n    gl.setRenderTarget(null);\n  });\n  return /*#__PURE__*/React.createElement(\"meshReflectorMaterialImpl\", _extends({\n    attach: \"material\" // Defines can't be updated dynamically, so we need to recreate the material\n    ,\n    key: 'key' + reflectorProps['defines-USE_BLUR'] + reflectorProps['defines-USE_DEPTH'] + reflectorProps['defines-USE_DISTORTION'],\n    ref: mergeRefs([materialRef, ref])\n  }, reflectorProps, props));\n});\n\nexport { MeshReflectorMaterial };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}