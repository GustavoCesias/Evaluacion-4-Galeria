{"ast":null,"code":"import * as React from 'react';\nimport { useTexture } from './useTexture.js';\nimport { useAsset } from 'use-asset';\nfunction getFormatString(format) {\n  switch (format) {\n    case 64:\n      return '-64px';\n    case 128:\n      return '-128px';\n    case 256:\n      return '-256px';\n    case 512:\n      return '-512px';\n    default:\n      return '';\n  }\n}\nconst LIST_URL = 'https://cdn.jsdelivr.net/gh/pmndrs/drei-assets@master/matcaps.json';\nconst MATCAP_ROOT = 'https://rawcdn.githack.com/emmelleppi/matcaps/9b36ccaaf0a24881a39062d05566c9e92be4aa0d';\nfunction useMatcapTexture() {\n  let id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  let format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1024;\n  const matcapList = useAsset(() => new Promise(async resolve => {\n    const matcapList = await fetch(LIST_URL).then(res => res.json());\n    resolve(matcapList);\n  }), 'matcapList');\n  const DEFAULT_MATCAP = matcapList[0];\n  const numTot = React.useMemo(() => Object.keys(matcapList).length, []);\n  const fileHash = React.useMemo(() => {\n    if (typeof id === 'string') {\n      return id;\n    } else if (typeof id === 'number') {\n      return matcapList[id];\n    }\n    return null;\n  }, [id]);\n  const fileName = \"\".concat(fileHash || DEFAULT_MATCAP).concat(getFormatString(format), \".png\");\n  const url = \"\".concat(MATCAP_ROOT, \"/\").concat(format, \"/\").concat(fileName);\n  const matcapTexture = useTexture(url);\n  return [matcapTexture, url, numTot];\n}\nexport { useMatcapTexture };","map":{"version":3,"names":["React","useTexture","useAsset","getFormatString","format","LIST_URL","MATCAP_ROOT","useMatcapTexture","id","arguments","length","undefined","matcapList","Promise","resolve","fetch","then","res","json","DEFAULT_MATCAP","numTot","useMemo","Object","keys","fileHash","fileName","concat","url","matcapTexture"],"sources":["D:/GUSTAVO/minimap/node_modules/@react-three/drei/core/useMatcapTexture.js"],"sourcesContent":["import * as React from 'react';\nimport { useTexture } from './useTexture.js';\nimport { useAsset } from 'use-asset';\n\nfunction getFormatString(format) {\n  switch (format) {\n    case 64:\n      return '-64px';\n\n    case 128:\n      return '-128px';\n\n    case 256:\n      return '-256px';\n\n    case 512:\n      return '-512px';\n\n    default:\n      return '';\n  }\n}\n\nconst LIST_URL = 'https://cdn.jsdelivr.net/gh/pmndrs/drei-assets@master/matcaps.json';\nconst MATCAP_ROOT = 'https://rawcdn.githack.com/emmelleppi/matcaps/9b36ccaaf0a24881a39062d05566c9e92be4aa0d';\nfunction useMatcapTexture(id = 0, format = 1024) {\n  const matcapList = useAsset(() => new Promise(async resolve => {\n    const matcapList = await fetch(LIST_URL).then(res => res.json());\n    resolve(matcapList);\n  }), 'matcapList');\n  const DEFAULT_MATCAP = matcapList[0];\n  const numTot = React.useMemo(() => Object.keys(matcapList).length, []);\n  const fileHash = React.useMemo(() => {\n    if (typeof id === 'string') {\n      return id;\n    } else if (typeof id === 'number') {\n      return matcapList[id];\n    }\n\n    return null;\n  }, [id]);\n  const fileName = `${fileHash || DEFAULT_MATCAP}${getFormatString(format)}.png`;\n  const url = `${MATCAP_ROOT}/${format}/${fileName}`;\n  const matcapTexture = useTexture(url);\n  return [matcapTexture, url, numTot];\n}\n\nexport { useMatcapTexture };\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,UAAU,QAAQ,iBAAiB;AAC5C,SAASC,QAAQ,QAAQ,WAAW;AAEpC,SAASC,eAAeA,CAACC,MAAM,EAAE;EAC/B,QAAQA,MAAM;IACZ,KAAK,EAAE;MACL,OAAO,OAAO;IAEhB,KAAK,GAAG;MACN,OAAO,QAAQ;IAEjB,KAAK,GAAG;MACN,OAAO,QAAQ;IAEjB,KAAK,GAAG;MACN,OAAO,QAAQ;IAEjB;MACE,OAAO,EAAE;EACb;AACF;AAEA,MAAMC,QAAQ,GAAG,oEAAoE;AACrF,MAAMC,WAAW,GAAG,wFAAwF;AAC5G,SAASC,gBAAgBA,CAAA,EAAwB;EAAA,IAAvBC,EAAE,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;EAAA,IAAEL,MAAM,GAAAK,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EAC7C,MAAMG,UAAU,GAAGV,QAAQ,CAAC,MAAM,IAAIW,OAAO,CAAC,MAAMC,OAAO,IAAI;IAC7D,MAAMF,UAAU,GAAG,MAAMG,KAAK,CAACV,QAAQ,CAAC,CAACW,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;IAChEJ,OAAO,CAACF,UAAU,CAAC;EACrB,CAAC,CAAC,EAAE,YAAY,CAAC;EACjB,MAAMO,cAAc,GAAGP,UAAU,CAAC,CAAC,CAAC;EACpC,MAAMQ,MAAM,GAAGpB,KAAK,CAACqB,OAAO,CAAC,MAAMC,MAAM,CAACC,IAAI,CAACX,UAAU,CAAC,CAACF,MAAM,EAAE,EAAE,CAAC;EACtE,MAAMc,QAAQ,GAAGxB,KAAK,CAACqB,OAAO,CAAC,MAAM;IACnC,IAAI,OAAOb,EAAE,KAAK,QAAQ,EAAE;MAC1B,OAAOA,EAAE;IACX,CAAC,MAAM,IAAI,OAAOA,EAAE,KAAK,QAAQ,EAAE;MACjC,OAAOI,UAAU,CAACJ,EAAE,CAAC;IACvB;IAEA,OAAO,IAAI;EACb,CAAC,EAAE,CAACA,EAAE,CAAC,CAAC;EACR,MAAMiB,QAAQ,MAAAC,MAAA,CAAMF,QAAQ,IAAIL,cAAc,EAAAO,MAAA,CAAGvB,eAAe,CAACC,MAAM,CAAC,SAAM;EAC9E,MAAMuB,GAAG,MAAAD,MAAA,CAAMpB,WAAW,OAAAoB,MAAA,CAAItB,MAAM,OAAAsB,MAAA,CAAID,QAAQ,CAAE;EAClD,MAAMG,aAAa,GAAG3B,UAAU,CAAC0B,GAAG,CAAC;EACrC,OAAO,CAACC,aAAa,EAAED,GAAG,EAAEP,MAAM,CAAC;AACrC;AAEA,SAASb,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}